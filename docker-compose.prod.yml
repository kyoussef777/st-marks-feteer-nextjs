version: '3.8'

services:
  nextjs-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: nextjs-app-production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    volumes:
      # Persist SQLite database in production
      - ./data/db.sqlite3:/app/db.sqlite3
      # Persist logs
      - ./logs:/app/logs
    networks:
      - prod-network
    # Don't expose port directly in production - use nginx
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: nextjs-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/prod/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/prod/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      nextjs-app:
        condition: service_healthy
    networks:
      - prod-network

  # Optional: PostgreSQL for production (if migrating from SQLite)
  postgres:
    image: postgres:15-alpine
    container_name: nextjs-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-nextjs}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_here}
      POSTGRES_DB: ${POSTGRES_DB:-nextjs_production}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - prod-network
    # Don't expose postgres port externally in production
    expose:
      - "5432"

  # Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: nextjs-redis-prod
    restart: unless-stopped
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-secure_redis_password}
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
    volumes:
      - redis_prod_data:/data
    networks:
      - prod-network
    expose:
      - "6379"

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nextjs-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - prod-network
    expose:
      - "9090"

  # Optional: Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: nextjs-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-secure_grafana_password}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - prod-network
    expose:
      - "3000"

networks:
  prod-network:
    driver: bridge

volumes:
  postgres_prod_data:
  redis_prod_data:
  prometheus_data:
  grafana_data: